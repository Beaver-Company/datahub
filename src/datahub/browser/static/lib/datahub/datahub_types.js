//
// Autogenerated by Thrift Compiler (0.9.1)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


DHType = {
'Boolean' : 0,
'Integer' : 1,
'Double' : 2,
'Text' : 3,
'Binary' : 4,
'Date' : 5,
'DateTime' : 6,
'TimeStamp' : 7
};
DHIndex = function(args) {
  this.primary = null;
  this.unique = null;
  this.btree_index = null;
  this.fulltext_index = null;
  if (args) {
    if (args.primary !== undefined) {
      this.primary = args.primary;
    }
    if (args.unique !== undefined) {
      this.unique = args.unique;
    }
    if (args.btree_index !== undefined) {
      this.btree_index = args.btree_index;
    }
    if (args.fulltext_index !== undefined) {
      this.fulltext_index = args.fulltext_index;
    }
  }
};
DHIndex.prototype = {};
DHIndex.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.primary = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.unique = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.btree_index = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.fulltext_index = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DHIndex.prototype.write = function(output) {
  output.writeStructBegin('DHIndex');
  if (this.primary !== null && this.primary !== undefined) {
    output.writeFieldBegin('primary', Thrift.Type.BOOL, 1);
    output.writeBool(this.primary);
    output.writeFieldEnd();
  }
  if (this.unique !== null && this.unique !== undefined) {
    output.writeFieldBegin('unique', Thrift.Type.BOOL, 2);
    output.writeBool(this.unique);
    output.writeFieldEnd();
  }
  if (this.btree_index !== null && this.btree_index !== undefined) {
    output.writeFieldBegin('btree_index', Thrift.Type.BOOL, 3);
    output.writeBool(this.btree_index);
    output.writeFieldEnd();
  }
  if (this.fulltext_index !== null && this.fulltext_index !== undefined) {
    output.writeFieldBegin('fulltext_index', Thrift.Type.BOOL, 4);
    output.writeBool(this.fulltext_index);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DHOrder = function(args) {
  this.ascending = null;
  this.descending = null;
  if (args) {
    if (args.ascending !== undefined) {
      this.ascending = args.ascending;
    }
    if (args.descending !== undefined) {
      this.descending = args.descending;
    }
  }
};
DHOrder.prototype = {};
DHOrder.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.ascending = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.descending = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DHOrder.prototype.write = function(output) {
  output.writeStructBegin('DHOrder');
  if (this.ascending !== null && this.ascending !== undefined) {
    output.writeFieldBegin('ascending', Thrift.Type.BOOL, 1);
    output.writeBool(this.ascending);
    output.writeFieldEnd();
  }
  if (this.descending !== null && this.descending !== undefined) {
    output.writeFieldBegin('descending', Thrift.Type.BOOL, 2);
    output.writeBool(this.descending);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DHDefault = function(args) {
  this.value = null;
  this.set_null = null;
  this.set_current_timestamp = null;
  if (args) {
    if (args.value !== undefined) {
      this.value = args.value;
    }
    if (args.set_null !== undefined) {
      this.set_null = args.set_null;
    }
    if (args.set_current_timestamp !== undefined) {
      this.set_current_timestamp = args.set_current_timestamp;
    }
  }
};
DHDefault.prototype = {};
DHDefault.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.value = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.set_null = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.set_current_timestamp = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DHDefault.prototype.write = function(output) {
  output.writeStructBegin('DHDefault');
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.STRING, 1);
    output.writeString(this.value);
    output.writeFieldEnd();
  }
  if (this.set_null !== null && this.set_null !== undefined) {
    output.writeFieldBegin('set_null', Thrift.Type.BOOL, 2);
    output.writeBool(this.set_null);
    output.writeFieldEnd();
  }
  if (this.set_current_timestamp !== null && this.set_current_timestamp !== undefined) {
    output.writeFieldBegin('set_current_timestamp', Thrift.Type.BOOL, 3);
    output.writeBool(this.set_current_timestamp);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DHForeignKey = function(args) {
  this.id = null;
  this.version_number = null;
  this.table_name = null;
  this.field_name = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.version_number !== undefined) {
      this.version_number = args.version_number;
    }
    if (args.table_name !== undefined) {
      this.table_name = args.table_name;
    }
    if (args.field_name !== undefined) {
      this.field_name = args.field_name;
    }
  }
};
DHForeignKey.prototype = {};
DHForeignKey.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.version_number = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.table_name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.field_name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DHForeignKey.prototype.write = function(output) {
  output.writeStructBegin('DHForeignKey');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.version_number !== null && this.version_number !== undefined) {
    output.writeFieldBegin('version_number', Thrift.Type.I32, 2);
    output.writeI32(this.version_number);
    output.writeFieldEnd();
  }
  if (this.table_name !== null && this.table_name !== undefined) {
    output.writeFieldBegin('table_name', Thrift.Type.STRING, 3);
    output.writeString(this.table_name);
    output.writeFieldEnd();
  }
  if (this.field_name !== null && this.field_name !== undefined) {
    output.writeFieldBegin('field_name', Thrift.Type.STRING, 4);
    output.writeString(this.field_name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DHField = function(args) {
  this.id = null;
  this.version_number = null;
  this.name = null;
  this.type = null;
  this.length = null;
  this.default_val = null;
  this.indexes = null;
  this.null_allowed = null;
  this.auto_increment = null;
  this.order = null;
  this.reference = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.version_number !== undefined) {
      this.version_number = args.version_number;
    }
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.type !== undefined) {
      this.type = args.type;
    }
    if (args.length !== undefined) {
      this.length = args.length;
    }
    if (args.default_val !== undefined) {
      this.default_val = args.default_val;
    }
    if (args.indexes !== undefined) {
      this.indexes = args.indexes;
    }
    if (args.null_allowed !== undefined) {
      this.null_allowed = args.null_allowed;
    }
    if (args.auto_increment !== undefined) {
      this.auto_increment = args.auto_increment;
    }
    if (args.order !== undefined) {
      this.order = args.order;
    }
    if (args.reference !== undefined) {
      this.reference = args.reference;
    }
  }
};
DHField.prototype = {};
DHField.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.version_number = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.length = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.default_val = new DHDefault();
        this.default_val.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.indexes = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = new DHIndex();
          elem6.read(input);
          this.indexes.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.BOOL) {
        this.null_allowed = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.BOOL) {
        this.auto_increment = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRUCT) {
        this.order = new DHOrder();
        this.order.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRUCT) {
        this.reference = new DHForeignKey();
        this.reference.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DHField.prototype.write = function(output) {
  output.writeStructBegin('DHField');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.version_number !== null && this.version_number !== undefined) {
    output.writeFieldBegin('version_number', Thrift.Type.I32, 2);
    output.writeI32(this.version_number);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 3);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 4);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.length !== null && this.length !== undefined) {
    output.writeFieldBegin('length', Thrift.Type.I32, 5);
    output.writeI32(this.length);
    output.writeFieldEnd();
  }
  if (this.default_val !== null && this.default_val !== undefined) {
    output.writeFieldBegin('default_val', Thrift.Type.STRUCT, 6);
    this.default_val.write(output);
    output.writeFieldEnd();
  }
  if (this.indexes !== null && this.indexes !== undefined) {
    output.writeFieldBegin('indexes', Thrift.Type.LIST, 7);
    output.writeListBegin(Thrift.Type.STRUCT, this.indexes.length);
    for (var iter7 in this.indexes)
    {
      if (this.indexes.hasOwnProperty(iter7))
      {
        iter7 = this.indexes[iter7];
        iter7.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.null_allowed !== null && this.null_allowed !== undefined) {
    output.writeFieldBegin('null_allowed', Thrift.Type.BOOL, 8);
    output.writeBool(this.null_allowed);
    output.writeFieldEnd();
  }
  if (this.auto_increment !== null && this.auto_increment !== undefined) {
    output.writeFieldBegin('auto_increment', Thrift.Type.BOOL, 9);
    output.writeBool(this.auto_increment);
    output.writeFieldEnd();
  }
  if (this.order !== null && this.order !== undefined) {
    output.writeFieldBegin('order', Thrift.Type.STRUCT, 10);
    this.order.write(output);
    output.writeFieldEnd();
  }
  if (this.reference !== null && this.reference !== undefined) {
    output.writeFieldBegin('reference', Thrift.Type.STRUCT, 11);
    this.reference.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DHSchema = function(args) {
  this.id = null;
  this.version_number = null;
  this.name = null;
  this.fields = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.version_number !== undefined) {
      this.version_number = args.version_number;
    }
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.fields !== undefined) {
      this.fields = args.fields;
    }
  }
};
DHSchema.prototype = {};
DHSchema.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.version_number = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size8 = 0;
        var _rtmp312;
        this.fields = [];
        var _etype11 = 0;
        _rtmp312 = input.readListBegin();
        _etype11 = _rtmp312.etype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          var elem14 = null;
          elem14 = new DHField();
          elem14.read(input);
          this.fields.push(elem14);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DHSchema.prototype.write = function(output) {
  output.writeStructBegin('DHSchema');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.version_number !== null && this.version_number !== undefined) {
    output.writeFieldBegin('version_number', Thrift.Type.I32, 2);
    output.writeI32(this.version_number);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 3);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.fields !== null && this.fields !== undefined) {
    output.writeFieldBegin('fields', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.fields.length);
    for (var iter15 in this.fields)
    {
      if (this.fields.hasOwnProperty(iter15))
      {
        iter15 = this.fields[iter15];
        iter15.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DHCell = function(args) {
  this.value = null;
  if (args) {
    if (args.value !== undefined) {
      this.value = args.value;
    }
  }
};
DHCell.prototype = {};
DHCell.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.value = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DHCell.prototype.write = function(output) {
  output.writeStructBegin('DHCell');
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.STRING, 1);
    output.writeString(this.value);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DHRow = function(args) {
  this.id = null;
  this.version_number = null;
  this.cells = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.version_number !== undefined) {
      this.version_number = args.version_number;
    }
    if (args.cells !== undefined) {
      this.cells = args.cells;
    }
  }
};
DHRow.prototype = {};
DHRow.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.version_number = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size16 = 0;
        var _rtmp320;
        this.cells = [];
        var _etype19 = 0;
        _rtmp320 = input.readListBegin();
        _etype19 = _rtmp320.etype;
        _size16 = _rtmp320.size;
        for (var _i21 = 0; _i21 < _size16; ++_i21)
        {
          var elem22 = null;
          elem22 = new DHCell();
          elem22.read(input);
          this.cells.push(elem22);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DHRow.prototype.write = function(output) {
  output.writeStructBegin('DHRow');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.version_number !== null && this.version_number !== undefined) {
    output.writeFieldBegin('version_number', Thrift.Type.I32, 2);
    output.writeI32(this.version_number);
    output.writeFieldEnd();
  }
  if (this.cells !== null && this.cells !== undefined) {
    output.writeFieldBegin('cells', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.cells.length);
    for (var iter23 in this.cells)
    {
      if (this.cells.hasOwnProperty(iter23))
      {
        iter23 = this.cells[iter23];
        iter23.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DHTable = function(args) {
  this.id = null;
  this.version_number = null;
  this.rows = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.version_number !== undefined) {
      this.version_number = args.version_number;
    }
    if (args.rows !== undefined) {
      this.rows = args.rows;
    }
  }
};
DHTable.prototype = {};
DHTable.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.version_number = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size24 = 0;
        var _rtmp328;
        this.rows = [];
        var _etype27 = 0;
        _rtmp328 = input.readListBegin();
        _etype27 = _rtmp328.etype;
        _size24 = _rtmp328.size;
        for (var _i29 = 0; _i29 < _size24; ++_i29)
        {
          var elem30 = null;
          elem30 = new DHRow();
          elem30.read(input);
          this.rows.push(elem30);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DHTable.prototype.write = function(output) {
  output.writeStructBegin('DHTable');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.version_number !== null && this.version_number !== undefined) {
    output.writeFieldBegin('version_number', Thrift.Type.I32, 2);
    output.writeI32(this.version_number);
    output.writeFieldEnd();
  }
  if (this.rows !== null && this.rows !== undefined) {
    output.writeFieldBegin('rows', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.rows.length);
    for (var iter31 in this.rows)
    {
      if (this.rows.hasOwnProperty(iter31))
      {
        iter31 = this.rows[iter31];
        iter31.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DHData = function(args) {
  this.schema = null;
  this.table = null;
  if (args) {
    if (args.schema !== undefined) {
      this.schema = args.schema;
    }
    if (args.table !== undefined) {
      this.table = args.table;
    }
  }
};
DHData.prototype = {};
DHData.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.schema = new DHSchema();
        this.schema.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.table = new DHTable();
        this.table.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DHData.prototype.write = function(output) {
  output.writeStructBegin('DHData');
  if (this.schema !== null && this.schema !== undefined) {
    output.writeFieldBegin('schema', Thrift.Type.STRUCT, 1);
    this.schema.write(output);
    output.writeFieldEnd();
  }
  if (this.table !== null && this.table !== undefined) {
    output.writeFieldBegin('table', Thrift.Type.STRUCT, 2);
    this.table.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DHQueryResult = function(args) {
  this.status = null;
  this.error_code = null;
  this.row_count = null;
  this.data = null;
  if (args) {
    if (args.status !== undefined) {
      this.status = args.status;
    }
    if (args.error_code !== undefined) {
      this.error_code = args.error_code;
    }
    if (args.row_count !== undefined) {
      this.row_count = args.row_count;
    }
    if (args.data !== undefined) {
      this.data = args.data;
    }
  }
};
DHQueryResult.prototype = {};
DHQueryResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.status = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.error_code = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.row_count = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.data = new DHData();
        this.data.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DHQueryResult.prototype.write = function(output) {
  output.writeStructBegin('DHQueryResult');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.BOOL, 1);
    output.writeBool(this.status);
    output.writeFieldEnd();
  }
  if (this.error_code !== null && this.error_code !== undefined) {
    output.writeFieldBegin('error_code', Thrift.Type.I32, 2);
    output.writeI32(this.error_code);
    output.writeFieldEnd();
  }
  if (this.row_count !== null && this.row_count !== undefined) {
    output.writeFieldBegin('row_count', Thrift.Type.I32, 3);
    output.writeI32(this.row_count);
    output.writeFieldEnd();
  }
  if (this.data !== null && this.data !== undefined) {
    output.writeFieldBegin('data', Thrift.Type.STRUCT, 4);
    this.data.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DHConnectionParams = function(args) {
  this.user = null;
  this.password = null;
  this.repo = null;
  if (args) {
    if (args.user !== undefined) {
      this.user = args.user;
    }
    if (args.password !== undefined) {
      this.password = args.password;
    }
    if (args.repo !== undefined) {
      this.repo = args.repo;
    }
  }
};
DHConnectionParams.prototype = {};
DHConnectionParams.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.user = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.password = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.repo = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DHConnectionParams.prototype.write = function(output) {
  output.writeStructBegin('DHConnectionParams');
  if (this.user !== null && this.user !== undefined) {
    output.writeFieldBegin('user', Thrift.Type.STRING, 1);
    output.writeString(this.user);
    output.writeFieldEnd();
  }
  if (this.password !== null && this.password !== undefined) {
    output.writeFieldBegin('password', Thrift.Type.STRING, 2);
    output.writeString(this.password);
    output.writeFieldEnd();
  }
  if (this.repo !== null && this.repo !== undefined) {
    output.writeFieldBegin('repo', Thrift.Type.STRING, 3);
    output.writeString(this.repo);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DHConnection = function(args) {
  this.id = null;
  this.user = null;
  this.repo = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.user !== undefined) {
      this.user = args.user;
    }
    if (args.repo !== undefined) {
      this.repo = args.repo;
    }
  }
};
DHConnection.prototype = {};
DHConnection.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.user = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.repo = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DHConnection.prototype.write = function(output) {
  output.writeStructBegin('DHConnection');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.user !== null && this.user !== undefined) {
    output.writeFieldBegin('user', Thrift.Type.STRING, 2);
    output.writeString(this.user);
    output.writeFieldEnd();
  }
  if (this.repo !== null && this.repo !== undefined) {
    output.writeFieldBegin('repo', Thrift.Type.STRING, 3);
    output.writeString(this.repo);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DHException = function(args) {
  this.errorCode = null;
  this.message = null;
  this.details = null;
  if (args) {
    if (args.errorCode !== undefined) {
      this.errorCode = args.errorCode;
    }
    if (args.message !== undefined) {
      this.message = args.message;
    }
    if (args.details !== undefined) {
      this.details = args.details;
    }
  }
};
Thrift.inherits(DHException, Thrift.TException);
DHException.prototype.name = 'DHException';
DHException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.errorCode = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.details = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DHException.prototype.write = function(output) {
  output.writeStructBegin('DHException');
  if (this.errorCode !== null && this.errorCode !== undefined) {
    output.writeFieldBegin('errorCode', Thrift.Type.I32, 1);
    output.writeI32(this.errorCode);
    output.writeFieldEnd();
  }
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 2);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  if (this.details !== null && this.details !== undefined) {
    output.writeFieldBegin('details', Thrift.Type.STRING, 3);
    output.writeString(this.details);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

VERSION = 0.1;
